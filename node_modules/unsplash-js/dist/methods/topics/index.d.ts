import { OmitStrict } from '../../helpers/typescript';
import { OrientationParam, PaginationParams } from '../../types/request';
import * as Photo from '../photos/types';
import * as Topic from './types';
export declare type TopicIdOrSlug = {
    topicIdOrSlug: string;
};
export declare type TopicOrderBy = 'latest' | 'oldest' | 'position' | 'featured';
export declare const list: {
    getPathname: (params: TopicIdOrSlug) => string;
} & {
    handleRequest: (a: OmitStrict<PaginationParams, "orderBy"> & {
        /**
         * default: `position`
         */
        orderBy?: TopicOrderBy | undefined;
        topicIdsOrSlugs?: string[] | undefined;
    }, additionalFetchOptions?: import("../../helpers/request").AdditionalFetchOptions | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<{
        results: Topic.Basic[];
        total: number;
    }>;
};
export declare const get: {
    getPathname: (params: TopicIdOrSlug) => string;
} & {
    handleRequest: (a: TopicIdOrSlug, additionalFetchOptions?: import("../../helpers/request").AdditionalFetchOptions | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<Topic.Full>;
};
export declare const getPhotos: {
    getPathname: (params: TopicIdOrSlug) => string;
} & {
    handleRequest: (a: TopicIdOrSlug & PaginationParams & OrientationParam, additionalFetchOptions?: import("../../helpers/request").AdditionalFetchOptions | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<{
        results: Photo.Basic[];
        total: number;
    }>;
};
