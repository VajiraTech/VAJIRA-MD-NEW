export declare type AnyJson = boolean | number | string | null | JsonArray | JsonMap;
export declare type JsonMap = {
    [key: string]: AnyJson;
};
export declare type JsonArray = Array<AnyJson>;
export declare const checkIsString: Refinement<unknown, string>;
/**
 * https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-377567046
 */
export declare type OmitStrict<T, K extends keyof T> = Omit<T, K>;
/**
 * Unlike TypeScript's `NonNullable`, this does _not_ include `undefined`
 */
export declare type Nullable<T> = T | null;
export declare const isDefined: <T>(x: T | null | undefined) => x is T;
export declare type NonEmptyArray<T> = [T, ...T[]];
declare type Refinement<A, B extends A> = (a: A) => a is B;
export declare function getRefinement<A, B extends A>(getB: (a: A) => Nullable<B>): Refinement<A, B>;
export declare const checkIsNonEmptyArray: <T>(a: T[]) => a is NonEmptyArray<T>;
export {};
