"use strict";
// This file was auto generated, do not edit.
// See ./scripts/build-nodes-map.js
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ArrayExpression_1 = __importDefault(require("./nodes/ArrayExpression"));
const AssignmentExpression_1 = __importDefault(require("./nodes/AssignmentExpression"));
const BinaryExpression_1 = __importDefault(require("./nodes/BinaryExpression"));
const BlockStatement_1 = __importDefault(require("./nodes/BlockStatement"));
const BreakStatement_1 = __importDefault(require("./nodes/BreakStatement"));
const CallExpression_1 = __importDefault(require("./nodes/CallExpression"));
const ConditionalExpression_1 = __importDefault(require("./nodes/ConditionalExpression"));
const ContinueStatement_1 = __importDefault(require("./nodes/ContinueStatement"));
const ExpressionStatement_1 = __importDefault(require("./nodes/ExpressionStatement"));
const ForStatement_1 = __importDefault(require("./nodes/ForStatement"));
const FunctionDeclaration_1 = __importDefault(require("./nodes/FunctionDeclaration"));
const FunctionExpression_1 = __importDefault(require("./nodes/FunctionExpression"));
const Identifier_1 = __importDefault(require("./nodes/Identifier"));
const IfStatement_1 = __importDefault(require("./nodes/IfStatement"));
const Literal_1 = __importDefault(require("./nodes/Literal"));
const LogicalExpression_1 = __importDefault(require("./nodes/LogicalExpression"));
const MemberExpression_1 = __importDefault(require("./nodes/MemberExpression"));
const NewExpression_1 = __importDefault(require("./nodes/NewExpression"));
const ObjectExpression_1 = __importDefault(require("./nodes/ObjectExpression"));
const ReturnStatement_1 = __importDefault(require("./nodes/ReturnStatement"));
const SequenceExpression_1 = __importDefault(require("./nodes/SequenceExpression"));
const SwitchCase_1 = __importDefault(require("./nodes/SwitchCase"));
const SwitchStatement_1 = __importDefault(require("./nodes/SwitchStatement"));
const ThisExpression_1 = __importDefault(require("./nodes/ThisExpression"));
const ThrowStatement_1 = __importDefault(require("./nodes/ThrowStatement"));
const TryStatement_1 = __importDefault(require("./nodes/TryStatement"));
const UnaryExpression_1 = __importDefault(require("./nodes/UnaryExpression"));
const UpdateExpression_1 = __importDefault(require("./nodes/UpdateExpression"));
const VariableDeclaration_1 = __importDefault(require("./nodes/VariableDeclaration"));
const WhileStatement_1 = __importDefault(require("./nodes/WhileStatement"));
const map = {
    ArrayExpression: ArrayExpression_1.default,
    AssignmentExpression: AssignmentExpression_1.default,
    BinaryExpression: BinaryExpression_1.default,
    BlockStatement: BlockStatement_1.default,
    BreakStatement: BreakStatement_1.default,
    CallExpression: CallExpression_1.default,
    ConditionalExpression: ConditionalExpression_1.default,
    ContinueStatement: ContinueStatement_1.default,
    ExpressionStatement: ExpressionStatement_1.default,
    ForStatement: ForStatement_1.default,
    FunctionDeclaration: FunctionDeclaration_1.default,
    FunctionExpression: FunctionExpression_1.default,
    Identifier: Identifier_1.default,
    IfStatement: IfStatement_1.default,
    Literal: Literal_1.default,
    LogicalExpression: LogicalExpression_1.default,
    MemberExpression: MemberExpression_1.default,
    NewExpression: NewExpression_1.default,
    ObjectExpression: ObjectExpression_1.default,
    ReturnStatement: ReturnStatement_1.default,
    SequenceExpression: SequenceExpression_1.default,
    SwitchCase: SwitchCase_1.default,
    SwitchStatement: SwitchStatement_1.default,
    ThisExpression: ThisExpression_1.default,
    ThrowStatement: ThrowStatement_1.default,
    TryStatement: TryStatement_1.default,
    UnaryExpression: UnaryExpression_1.default,
    UpdateExpression: UpdateExpression_1.default,
    VariableDeclaration: VariableDeclaration_1.default,
    WhileStatement: WhileStatement_1.default
};
function getNode(name) {
    const NodeConstructor = map[name];
    if (!NodeConstructor) {
        const error = new Error(`Module not found: ${name}`);
        error.code = 'MODULE_NOT_FOUND';
        throw error;
    }
    return NodeConstructor;
}
exports.default = getNode;
