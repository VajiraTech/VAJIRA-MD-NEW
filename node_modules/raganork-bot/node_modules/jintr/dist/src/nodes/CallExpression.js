"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class CallExpression {
    static visit(node, visitor) {
        var _a, _b;
        const obj_name = (_a = node.callee.object) === null || _a === void 0 ? void 0 : _a.name;
        const fn_name = node.callee.name || ((_b = node.callee.property) === null || _b === void 0 ? void 0 : _b.name);
        // Obj.fn(...);
        if (visitor.listeners[obj_name]) {
            const cb = visitor.listeners[obj_name](node, visitor);
            if (cb !== 'proceed') {
                return cb;
            }
        }
        // ?.fn(...);
        if (visitor.listeners[fn_name]) {
            const cb = visitor.listeners[fn_name](node, visitor);
            if (cb !== 'proceed') {
                return cb;
            }
        }
        switch (fn_name) {
            case 'print': {
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                console.log(...args);
                return;
            }
            case 'push': {
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const obj = visitor.visitNode(node.callee.object);
                for (const arg of args)
                    obj.push(arg);
                return;
            }
            case 'join': {
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const arr = visitor.visitNode(node.callee.object);
                return arr.join((args === null || args === void 0 ? void 0 : args[0]) || '');
            }
            case 'splice': {
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const arr = visitor.visitNode(node.callee.object);
                return arr.splice(...args);
            }
            case 'reverse': {
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const arr = visitor.visitNode(node.callee.object);
                return arr.reverse();
            }
            case 'unshift': {
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const arr = visitor.visitNode(node.callee.object);
                return arr.unshift(...args);
            }
            case 'split': {
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const obj = visitor.visitNode(node.callee.object);
                return obj.split(...args);
            }
            case 'indexOf': {
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const obj = visitor.visitNode(node.callee.object);
                return obj.indexOf(...args);
            }
            case 'pop': {
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const arr = visitor.visitNode(node.callee.object);
                return arr.pop();
            }
            case 'forEach': {
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const arr = visitor.visitNode(node.callee.object);
                // Set forEach's “this” arg
                if (args.length > 1) {
                    visitor.scope.set('_this', args.slice(-1)[0]);
                }
                // Execute callback function
                let index = 0;
                for (const element of arr) {
                    args[0]([element, index++, arr]);
                }
                return;
            }
            default:
        }
        const callee = visitor.visitNode(node.callee);
        if (typeof callee !== 'function') {
            if (node.callee.object) {
                throw new Error(`${visitor.visitNode(node.callee.object)}.${visitor.visitNode(node.callee.property)}(...) is not a function`);
            }
            throw new Error(`${callee} is not a function`);
        }
        else {
            const args = node.arguments.map((arg) => visitor.visitNode(arg));
            if (callee.toString().includes('[native code]')) {
                const obj = visitor.visitNode(node.callee.object);
                return obj[node.callee.property.name]();
            }
            return callee(args);
        }
    }
}
exports.default = CallExpression;
