import UniversalCache from '../utils/Cache';
import EventEmitterLike from '../utils/EventEmitterLike';
import Actions from './Actions';
import Player from './Player';
import HTTPClient, { FetchFunction } from '../utils/HTTPClient';
import { DeviceCategory } from '../utils/Utils';
import OAuth, { Credentials, OAuthAuthErrorEventHandler, OAuthAuthEventHandler, OAuthAuthPendingEventHandler } from './OAuth';
export declare enum ClientType {
    WEB = "WEB",
    MUSIC = "WEB_REMIX",
    ANDROID = "ANDROID",
    ANDROID_MUSIC = "ANDROID_MUSIC",
    ANDROID_CREATOR = "ANDROID_CREATOR",
    TV_EMBEDDED = "TVHTML5_SIMPLY_EMBEDDED_PLAYER"
}
export interface Context {
    client: {
        hl: string;
        gl: string;
        remoteHost?: string;
        screenDensityFloat: number;
        screenHeightPoints: number;
        screenPixelDensity: number;
        screenWidthPoints: number;
        visitorData: string;
        userAgent: string;
        clientName: string;
        clientVersion: string;
        clientScreen?: string;
        androidSdkVersion?: string;
        osName: string;
        osVersion: string;
        platform: string;
        clientFormFactor: string;
        userInterfaceTheme: string;
        timeZone: string;
        browserName?: string;
        browserVersion?: string;
        originalUrl: string;
        deviceMake: string;
        deviceModel: string;
        utcOffsetMinutes: number;
    };
    user: {
        enableSafetyMode: boolean;
        lockedSafetyMode: boolean;
    };
    thirdParty?: {
        embedUrl: string;
    };
    request: {
        useSsl: true;
    };
}
export interface SessionOptions {
    /**
     * Language.
     */
    lang?: string;
    /**
     * Geolocation.
     */
    location?: string;
    /**
     * The account index to use. This is useful if you have multiple accounts logged in.
     * **NOTE:**
     * Only works if you are signed in with cookies.
     */
    account_index?: number;
    /**
     * Specifies whether to retrieve the JS player. Disabling this will make session creation faster.
     * **NOTE:** Deciphering formats is not possible without the JS player.
     */
    retrieve_player?: boolean;
    /**
     * Specifies whether to enable safety mode. This will prevent the session from loading any potentially unsafe content.
     */
    enable_safety_mode?: boolean;
    /**
     * Specifies whether to generate the session data locally or retrieve it from YouTube.
     * This can be useful if you need more performance.
     */
    generate_session_locally?: boolean;
    /**
     * Platform to use for the session.
     */
    device_category?: DeviceCategory;
    /**
     * InnerTube client type.
     */
    client_type?: ClientType;
    /**
     * The time zone.
     */
    timezone?: string;
    /**
     * Used to cache the deciphering functions from the JS player.
     */
    cache?: UniversalCache;
    /**
     * YouTube cookies.
     */
    cookie?: string;
    /**
     * Fetch function to use.
     */
    fetch?: FetchFunction;
}
export interface SessionData {
    context: Context;
    api_key: string;
    api_version: string;
}
export default class Session extends EventEmitterLike {
    #private;
    oauth: OAuth;
    http: HTTPClient;
    logged_in: boolean;
    actions: Actions;
    cache?: UniversalCache;
    constructor(context: Context, api_key: string, api_version: string, account_index: number, player?: Player, cookie?: string, fetch?: FetchFunction, cache?: UniversalCache);
    on(type: 'auth', listener: OAuthAuthEventHandler): void;
    on(type: 'auth-pending', listener: OAuthAuthPendingEventHandler): void;
    on(type: 'auth-error', listener: OAuthAuthErrorEventHandler): void;
    on(type: 'update-credentials', listener: OAuthAuthEventHandler): void;
    once(type: 'auth', listener: OAuthAuthEventHandler): void;
    once(type: 'auth-pending', listener: OAuthAuthPendingEventHandler): void;
    once(type: 'auth-error', listener: OAuthAuthErrorEventHandler): void;
    static create(options?: SessionOptions): Promise<Session>;
    static getSessionData(lang?: string, location?: string, account_index?: number, enable_safety_mode?: boolean, generate_session_locally?: boolean, device_category?: DeviceCategory, client_name?: ClientType, tz?: string, fetch?: FetchFunction): Promise<{
        account_index: number;
        context: Context;
        api_key: string;
        api_version: string;
    }>;
    signIn(credentials?: Credentials): Promise<void>;
    /**
     * Signs out of the current account and revokes the credentials.
     */
    signOut(): Promise<Response | undefined>;
    /**
     * InnerTube API key.
     */
    get key(): string;
    /**
     * InnerTube API version.
     */
    get api_version(): string;
    get client_version(): string;
    get client_name(): string;
    get account_index(): number;
    get context(): Context;
    get player(): Player | undefined;
    get lang(): string;
}
