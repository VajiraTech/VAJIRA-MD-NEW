var _AccountManager_actions;
import { __awaiter, __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import Proto from '../proto/index.js';
import Analytics from '../parser/youtube/Analytics.js';
import TimeWatched from '../parser/youtube/TimeWatched.js';
import AccountInfo from '../parser/youtube/AccountInfo.js';
import Settings from '../parser/youtube/Settings.js';
import { InnertubeError } from '../utils/Utils.js';
class AccountManager {
    constructor(actions) {
        _AccountManager_actions.set(this, void 0);
        __classPrivateFieldSet(this, _AccountManager_actions, actions, "f");
        this.channel = {
            /**
             * Edits channel name.
             * @param new_name - The new channel name.
             */
            editName: (new_name) => {
                if (!__classPrivateFieldGet(this, _AccountManager_actions, "f").session.logged_in)
                    throw new InnertubeError('You must be signed in to perform this operation.');
                return __classPrivateFieldGet(this, _AccountManager_actions, "f").execute('/channel/edit_name', {
                    givenName: new_name,
                    client: 'ANDROID'
                });
            },
            /**
             * Edits channel description.
             * @param new_description - The new description.
             */
            editDescription: (new_description) => {
                if (!__classPrivateFieldGet(this, _AccountManager_actions, "f").session.logged_in)
                    throw new InnertubeError('You must be signed in to perform this operation.');
                return __classPrivateFieldGet(this, _AccountManager_actions, "f").execute('/channel/edit_description', {
                    givenDescription: new_description,
                    client: 'ANDROID'
                });
            },
            /**
             * Retrieves basic channel analytics.
             */
            getBasicAnalytics: () => this.getAnalytics()
        };
    }
    /**
     * Retrieves channel info.
     */
    getInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!__classPrivateFieldGet(this, _AccountManager_actions, "f").session.logged_in)
                throw new InnertubeError('You must be signed in to perform this operation.');
            const response = yield __classPrivateFieldGet(this, _AccountManager_actions, "f").execute('/account/accounts_list', { client: 'ANDROID' });
            return new AccountInfo(response);
        });
    }
    /**
     * Retrieves time watched statistics.
     */
    getTimeWatched() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield __classPrivateFieldGet(this, _AccountManager_actions, "f").execute('/browse', {
                browseId: 'SPtime_watched',
                client: 'ANDROID'
            });
            return new TimeWatched(response);
        });
    }
    /**
     * Opens YouTube settings.
     */
    getSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield __classPrivateFieldGet(this, _AccountManager_actions, "f").execute('/browse', {
                browseId: 'SPaccount_overview'
            });
            return new Settings(__classPrivateFieldGet(this, _AccountManager_actions, "f"), response);
        });
    }
    /**
     * Retrieves basic channel analytics.
     */
    getAnalytics() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const info = yield this.getInfo();
            const params = Proto.encodeChannelAnalyticsParams((_a = info.footers) === null || _a === void 0 ? void 0 : _a.endpoint.payload.browseId);
            const response = yield __classPrivateFieldGet(this, _AccountManager_actions, "f").execute('/browse', {
                browseId: 'FEanalytics_screen',
                client: 'ANDROID',
                params
            });
            return new Analytics(response);
        });
    }
}
_AccountManager_actions = new WeakMap();
export default AccountManager;
//# sourceMappingURL=AccountManager.js.map